" MY VIMRC

" set runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required
Bundle 'VundleVim/Vundle.vim'


Bundle 'scrooloose/nerdtree'
" nerd tree setup
" autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
" start nerdtree when just vim launched
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" start nerdtree when vim <dir> is executed
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif


Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-fugitive'
Bundle 'klen/python-mode'
" Distraction free (:Goyo)
Bundle 'junegunn/goyo.vim' 
" Recently opened files (:MRU)
Bundle 'yegappan/mru' 
Bundle 'amix/vim-zenroom2'
" line addition-deletion
Bundle 'airblade/vim-gitgutter' 
" Colorscheme
Bundle 'sjl/badwolf' 
"Bundle 'junegunn/limelight.vim'
"Bundle 'davidhalter/jedi-vim'
"Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'nvie/vim-flake8'
" automatically close parenthesis
Bundle 'cohama/lexima.vim'
" Notes
Bundle 'vimwiki/vimwiki'
" Fancy startup screen
Bundle 'mhinz/vim-startify'
" Indentation
Bundle "Yggdroot/indentLine"
" Completion
"Bundle "Valloric/YouCompleteMe" " Some issue with mac related to version
" Snippets
"Bundle "SirVer/ultisnips"
Bundle "honza/vim-snippets"

" utilsnips configuration
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" End of plugins
call vundle#end()

" Use only Vim mode
set nocompatible

set fileencoding=utf-8
set encoding=utf-8

set backspace=indent,eol,start

" Shows multi key commands
set showcmd

" shell setting
set shell=/bin/zsh

" Setting Color Scheme
"set background=dark
"colorscheme solarized

" Understanding filetypes
filetype off " vundle required
filetype indent on
filetype plugin on

syntax enable

" gives the line number
set number
set numberwidth=2

" Smart indentation
set smartindent

" Rounds indent according to the shiftwidth
set shiftround

" Wrap condition
set linebreak

" Search specifications 
set hlsearch
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch

" Window settings
set winwidth=87
set winheight=5
set winminheight=5
set winminwidth=20
set winheight=999

" Visual warning
set visualbell

" Disabling swap file
set noswapfile

" Tab settings
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

set scrolloff=5

" Shows option when using tab completion for cmd line commands
set wildmenu

" Personalised status line
set statusline=%F\ line:%l/%L\ col:%c\ %y\ %r

" Makes Line numbers visible
"highlight LineNr ctermfg=blue ctermbg=black

" Status line always visible
set laststatus=2

" Python Mode
" Deactivate Rope
" Keys
" K: PyDoc
" <leader>b breakpoint
" [[ previous class, method and the like
" ]] next class, method and the like
" [M previous class, method and the like
" ]M next class, method and the like

" Do not Use rope for autocompletion
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Linting
let g:pymode_lint = 0
let g:pymode_lint_checker = 'pyflakes,pep8'

" Autocheck on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable code execution
let g:pymode_run = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" Syntax Highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" MY MAPPINGS
let mapleader=','

nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <leader>n :noh<CR>

" Mappings for indenting file having code in different languages
nnoremap <leader>hp :set filetype=html<CR> :w<CR> :set filetype=php<CR> :w<CR> 

" Easily add HTML comments
nnoremap <leader>ch I<!-- <ESC>A --><ESC>

"Easier navigation among windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Spell checking
nnoremap <leader>s :setlocal spell spelllang=en_us<CR>
nnoremap <leader>ns :set nospell<CR>

"pdflatex
nnoremap <leader>l :!pdflatex -shell-escape % <CR><CR>

nnoremap <leader>f :call Flake8()<CR>

" MY AUTO COMMANDS

" Automatically sources the vimrc file on saving
"autocmd BufWritePost $MYVIMRC source $MYVIMRC

" MY ABBREVIATIONS

" Command line corrections
cnoreabbrev Wq wq
cnoreabbrev qw wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

augroup vimrc_autocmds
  autocmd!
  " higlight characters past column 80
  autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
  autocmd FileType python match Excess /\%80v.*/
augroup END

" MY FUNCTIONS

" Not very friendly with the snipmate plugin
" Smartly uses tab for putting tab spaces or autocompletion
"function! SmartTab()
"    let col = col(".") - 1
"    if !col || getline(".")[col - 1] !~ '\k'
"        return "\<Tab>"
"    else
"        return "\<C-n>"
"endfunction

"inoremap <Tab> <C-r>=SmartTab()<CR>
"inoremap <s-Tab> <C-p>
